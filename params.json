{
  "name": "Jsspecification",
  "tagline": "js代码高效维护以及规范之一",
  "body": "### 设计思想\r\n1.原子思想，即确认每个function就做一件事   \r\n2.归纳思想，将同一类的操作，全部整合到一起   \r\n3.方便维护，可以便于后来人进行快速维护   \r\n4.方便拓展，即可以根据每个不同的项目进行不同的更改   \r\n5.通用前端设计模式，一些前端可以通用的设计模式   \r\n\r\n### 具体实现\r\n    /**\r\n     * Created by gerry.zhong on 2016/10/11.\r\n     */\r\n    var gerry =\r\n    (function(){\r\n        //创建一个独立的对象，注入所有的方法，包括你想抛出去和不想抛出去的\r\n        var tool = {\r\n            AAAA:function(){},\r\n            BBBB:function(){\r\n                console.log(\"我只想内部使用，不想给别人用\");\r\n            }\r\n        };\r\n     \r\n        /*\r\n        * 该对象承载所有需要抛出去的对象\r\n        *   1.该对象中的方法可以自己写\r\n        *   2.该对象中的方法可以注入（例子中的tempObj.tool.AA）\r\n        *   3.该对象也可以选择性抛出给使用者需要的方法，也可以隐藏（tool.BBBB）\r\n        * */\r\n        var tempObj ={\r\n            //reader为一些初始化需要的操作，有时候会有注册事件等，或者一些预操作\r\n            reader:function(){\r\n            },\r\n            //注入所有的选择器，方便选择器变化，直接修改该对象中的选择器，而不需要全局去更改\r\n            selector:{\r\n                mySelector:\"#mySelector\",  //原密码\r\n            },\r\n            //注入所有的接口地址，方便接口变化可以进行，快速变更，不需要全局找引用的对象\r\n            interface:{\r\n                loginUrl:\"\",\r\n            },\r\n            //注入page中所有的事件，统一管理，建议命名规范：事件_命名，例 click_login\r\n            registerEle:{\r\n                click_login:function(){\r\n                    //注册单击事件\r\n                }\r\n            },\r\n            //注入所有ajax请求，页面所有请求，将在这里统一管理，建议命名规范：ajax_命名，例 ajax_login\r\n            /*\r\n            * 该请求中有2种方案,看需求使用\r\n            *  1.不公用一个请求方案\r\n            *  2.公用一个请求，但是回调处理不一样\r\n            * */\r\n            ajaxRequest:{\r\n                //不公用一个请求方案\r\n                ajax_login:function(){\r\n                    $.post(\"\",\"\",function(data){\r\n                        tempObj.callback.call_login(data);\r\n                    });\r\n                },\r\n                //会有多个业务公用这个请求\r\n                ajax_login_T:function(callback){\r\n                    //所有接口地址从interface中获取，callback中tempObj.callback中处理\r\n                    $.post(\"\",\"\",callback);\r\n                },\r\n            },\r\n            //处理所有回调函数，针对一个请求，处理一个回调\r\n            callback:{\r\n                //不共用请求处理回调\r\n                call_login:function(data){\r\n                    //处理回调\r\n                },\r\n                //公用请求处理回调\r\n                call_login_T:function(){\r\n                    var temp = function(){\r\n     \r\n                    };\r\n                    tempObj.ajaxRequest.ajax_login_T(temp);\r\n                }\r\n            },\r\n            //所有使用的工具类，如果每个项目都单独的unit.js或者common.js等存放一些公共方法的，这里可以不使用\r\n            // PS:这里存放的只是仅针对于这个页面处理的一些tool，一般没必要抛出去，不过看业务而定\r\n            tool:{\r\n                A:function(){\r\n                    console.log(\"我是自己写的方法\");\r\n                },\r\n                AA:tool.AAAA,    //这是我想抛出去给别人用的东西\r\n            },\r\n            //临时缓存存放区域，仅针对本页面，如果跨页面请存放cookie或者localstorage等\r\n            //主要解决有时候会使用页面控件display来缓存当前页面的一些数据\r\n            temp:{\r\n     \r\n            },\r\n            /*\r\n            * 业务使用区域，针对每个特别的业务去串上面所有的一个个原子\r\n            *   因为上面所有的方法，只是做一件事，这边可以根据业务进行串服务，很简单的\r\n            * */\r\n            firm:{\r\n     \r\n            }\r\n        };\r\n        /*\r\n        * 闭包抛出去的方法\r\n        * */\r\n        var outputObj =function(){\r\n            //首先执行reader方法，初始化一些操作，比如注册事件啥啥啥的\r\n            tempObj.reader();\r\n            /*\r\n            * 抛出给别人使用的对象\r\n            *   想给别人看和使用的东西，可以注入tempObj对象，就像tool中的AA的方式\r\n            *   不想给别人看和使用的东西，就像内部tool对象中的BBBB方法，你内部可以使用，外部是无法引用的\r\n            * */\r\n            return tempObj;\r\n        }\r\n \r\n        //抛出你希望抛出去的对象，因为你掌控了所有，哈哈。\r\n        return new outputObj();\r\n    })();\r\n\r\n### 设计目标\r\n代码规范，以及代码可以高效维护\r\n\r\n### 一些方便维护的操作\r\n  1.如果修改事件，我就去事件中找我需要的事件，  \r\n  2.请求要修改，我就去我的请求中去修改，我要变化的请求，   \r\n  3.如果回调变了，我就去回调函数中去处理回调，   \r\n  4.选择器和接口，就直接去这2个对象中去修改，不需要全局去变化   \r\n  5....\r\n### 支持信息\r\n本人，未婚，性别男，爱好女。   \r\n职业目标：全栈架构师   \r\n博客园博客：http://www.cnblogs.com/GerryOfZhong/p/5948501.html   ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}